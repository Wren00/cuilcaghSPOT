
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.1.1
 * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
 */
Prisma.prismaVersion = {
  client: "4.1.1",
  engine: "8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Confirmed_sightingsScalarFieldEnum = makeEnum({
  id: 'id',
  organism_id: 'organism_id',
  user_id: 'user_id',
  picture_url: 'picture_url',
  date: 'date',
  lat: 'lat',
  long: 'long'
});

exports.Prisma.Flyway_schema_historyScalarFieldEnum = makeEnum({
  installed_rank: 'installed_rank',
  version: 'version',
  description: 'description',
  type: 'type',
  script: 'script',
  checksum: 'checksum',
  installed_by: 'installed_by',
  installed_on: 'installed_on',
  execution_time: 'execution_time',
  success: 'success'
});

exports.Prisma.Interest_groupsScalarFieldEnum = makeEnum({
  id: 'id',
  group_name: 'group_name',
  description: 'description'
});

exports.Prisma.OrganismsScalarFieldEnum = makeEnum({
  id: 'id',
  taxon_name: 'taxon_name',
  latin_name: 'latin_name',
  taxon_group_id: 'taxon_group_id',
  picture_url: 'picture_url',
  description: 'description'
});

exports.Prisma.ReactionsScalarFieldEnum = makeEnum({
  id: 'id',
  reaction_name: 'reaction_name'
});

exports.Prisma.Taxon_groupsScalarFieldEnum = makeEnum({
  id: 'id',
  taxon_group_name: 'taxon_group_name',
  description: 'description'
});

exports.Prisma.Unverified_sightingsScalarFieldEnum = makeEnum({
  id: 'id',
  organism_id: 'organism_id',
  user_id: 'user_id',
  picture_url: 'picture_url',
  date: 'date',
  lat: 'lat',
  long: 'long',
  user_vote_id: 'user_vote_id',
  reaction_id: 'reaction_id'
});

exports.Prisma.User_levelsScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description'
});

exports.Prisma.User_profilesScalarFieldEnum = makeEnum({
  id: 'id',
  profile_message: 'profile_message',
  profile_picture: 'profile_picture'
});

exports.Prisma.User_to_reactionScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  reaction_id: 'reaction_id'
});

exports.Prisma.User_votesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  user_vote: 'user_vote'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  user_name: 'user_name',
  email_address: 'email_address',
  user_password: 'user_password',
  trusted_user: 'trusted_user',
  user_level_id: 'user_level_id',
  user_profile_id: 'user_profile_id'
});

exports.Prisma.Users_to_groupsScalarFieldEnum = makeEnum({
  id: 'id',
  group_id: 'group_id',
  user_id: 'user_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  confirmed_sightings: 'confirmed_sightings',
  flyway_schema_history: 'flyway_schema_history',
  interest_groups: 'interest_groups',
  organisms: 'organisms',
  reactions: 'reactions',
  taxon_groups: 'taxon_groups',
  unverified_sightings: 'unverified_sightings',
  user_levels: 'user_levels',
  user_profiles: 'user_profiles',
  user_to_reaction: 'user_to_reaction',
  user_votes: 'user_votes',
  users: 'users',
  users_to_groups: 'users_to_groups'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
